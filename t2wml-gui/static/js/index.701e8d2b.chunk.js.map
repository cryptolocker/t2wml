{"version":3,"sources":["index/T2WMLLogo.js","serviceWorker.js","index/App.js","index/index.js"],"names":["T2WMLLogo","props","_this","Object","_Users_gokul_Desktop_T2WL_t2wml_gui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_gokul_Desktop_T2WL_t2wml_gui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_gokul_Desktop_T2WL_t2wml_gui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","logo","version","homeUrl","server","_this$state","logoTooltipHtml","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_bootstrap__WEBPACK_IMPORTED_MODULE_6__","style","width","className","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","overlay","placement","trigger","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","Brand","cursor","fontWeight","onClick","window","location","href","Text","React","Component","__webpack_require__","d","__webpack_exports__","unregister","Boolean","hostname","match","navigator","serviceWorker","ready","then","registration","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","react_default","Navbar","bg","variant","sticky","height","ReactDOM","render","src_index_App","document","getElementById"],"mappings":"iLAKMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAA,OACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKDQ,MAAQ,CACXC,KAAM,YACNC,QAAS,cACTC,QAASC,0BATMX,wEAaV,IAAAY,EAC4BT,KAAKI,MAAhCC,EADDI,EACCJ,KAAMC,EADPG,EACOH,QAASC,EADhBE,EACgBF,QACjBG,EACJC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,MAAO,CAAEC,MAAO,gBACvBL,EAAAC,EAAAC,cAAA,QAAMI,UAAU,aAAhB,oBACmBN,EAAAC,EAAAC,cAAA,WADnB,qBAMJ,OACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAgBC,QAAST,EAAiBU,UAAU,SAASC,QAAQ,SACnEV,EAAAC,EAAAC,cAACS,EAAA,EAAOC,MAAR,CAAcN,UAAU,OAAOF,MAAO,CAAES,OAAQ,UAAWC,WAAY,QAAUC,QAAS,WAAQC,OAAOC,SAASC,KAAOtB,IACtHF,IAGLM,EAAAC,EAAAC,cAACS,EAAA,EAAOQ,KAAR,CAAab,UAAU,OAAOF,MAAO,CAAES,OAAQ,YAC5ClB,WAhCayB,IAAMC,WAuCfrC,wCC5CfsC,EAAAC,EAAAC,EAAA,sBAAAC,IAYoBC,QACW,cAA7BV,OAAOC,SAASU,UAEe,UAA7BX,OAAOC,SAASU,UAEhBX,OAAOC,SAASU,SAASC,MACvB,2DA8GC,SAASH,IACV,kBAAmBI,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaR,4PClEJS,cAhCb,SAAAA,EAAYjD,GAAO,IAAAC,EAAA,OAAAC,OAAAgD,EAAA,EAAAhD,CAAAE,KAAA6C,IACjBhD,EAAAC,OAAAiD,EAAA,EAAAjD,CAAAE,KAAAF,OAAAkD,EAAA,EAAAlD,CAAA+C,GAAA1C,KAAAH,KAAMJ,KAGDQ,MAAQ,GAJIP,wEAUjB,OACEoD,EAAArC,EAAAC,cAAA,WAGEoC,EAAArC,EAAAC,cAAA,WACEoC,EAAArC,EAAAC,cAACqC,EAAA,EAAD,CAAQjC,UAAU,SAASkC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,MAAMtC,MAAO,CAAEuC,OAAQ,SAGhFL,EAAArC,EAAAC,cAAClB,EAAA,EAAD,QAMJsD,EAAArC,EAAAC,cAAA,oBAzBUkB,IAAMC,oBC1BxBuB,IAASC,OAAOP,EAAArC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SAKjDlB","file":"static/js/index.701e8d2b.chunk.js","sourcesContent":["import React from 'react';\n\n// T2WMLLogo\nimport { Navbar, OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nclass T2WMLLogo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const server = \"http://localhost:5000\";\n\n    // init state\n    this.state = {\n      logo: \"T2WML GUI\",\n      version: \"v1.5 (beta)\",\n      homeUrl: server + \"/\",\n    }\n  }\n\n  render() {\n    const { logo, version, homeUrl } = this.state;\n    const logoTooltipHtml = (\n      <Tooltip style={{ width: \"fit-content\" }}>\n        <span className=\"text-left\">\n          Table to Wikidata<br />\n          Mapping Language\n        </span>\n      </Tooltip>\n    );\n    return (\n      <span>\n        <OverlayTrigger overlay={logoTooltipHtml} placement=\"bottom\" trigger=\"hover\">\n          <Navbar.Brand className=\"pl-2\" style={{ cursor: \"pointer\", fontWeight: \"bold\" }} onClick={() => { window.location.href = homeUrl; }}>\n            {logo}\n          </Navbar.Brand>\n        </OverlayTrigger>\n        <Navbar.Text className=\"pr-2\" style={{ cursor: \"default\" }}>\n          {version}\n        </Navbar.Text>\n      </span>\n    );\n  }\n}\n\nexport default T2WMLLogo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './App.css';\n// import * as utils from '../utils'\nimport T2WMLLogo from '../index/T2WMLLogo'\n\n// App\nimport { Navbar } from 'react-bootstrap';\n\n// http://patorjk.com/software/taag/#p=display&f=Doh&t=App\n//                AAA                                                      \n//               A:::A                                                     \n//              A:::::A                                                    \n//             A:::::::A                                                   \n//            A:::::::::A          ppppp   ppppppppp   ppppp   ppppppppp   \n//           A:::::A:::::A         p::::ppp:::::::::p  p::::ppp:::::::::p  \n//          A:::::A A:::::A        p:::::::::::::::::p p:::::::::::::::::p \n//         A:::::A   A:::::A       pp::::::ppppp::::::ppp::::::ppppp::::::p\n//        A:::::A     A:::::A       p:::::p     p:::::p p:::::p     p:::::p\n//       A:::::AAAAAAAAA:::::A      p:::::p     p:::::p p:::::p     p:::::p\n//      A:::::::::::::::::::::A     p:::::p     p:::::p p:::::p     p:::::p\n//     A:::::AAAAAAAAAAAAA:::::A    p:::::p    p::::::p p:::::p    p::::::p\n//    A:::::A             A:::::A   p:::::ppppp:::::::p p:::::ppppp:::::::p\n//   A:::::A               A:::::A  p::::::::::::::::p  p::::::::::::::::p \n//  A:::::A                 A:::::A p::::::::::::::pp   p::::::::::::::pp  \n// AAAAAAA                   AAAAAAAp::::::pppppppp     p::::::pppppppp    \n//                                  p:::::p             p:::::p            \n//                                  p:::::p             p:::::p            \n//                                 p:::::::p           p:::::::p           \n//                                 p:::::::p           p:::::::p           \n//                                 p:::::::p           p:::::::p           \n//                                 ppppppppp           ppppppppp      \n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // init app\n    this.state = {\n\n    };\n  }\n\n  render() {\n    return (\n      <div>\n\n        {/* navbar */}\n        <div>\n          <Navbar className=\"shadow\" bg=\"dark\" variant=\"dark\" sticky=\"top\" style={{ height: \"50px\" }}>\n\n            {/* logo */}\n            <T2WMLLogo />\n\n          </Navbar>\n        </div>\n\n        {/* content */}\n        <div>\n          {/* nothing */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../index/index.css';\nimport App from './App';\nimport * as serviceWorker from '../serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}